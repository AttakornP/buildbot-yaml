#!/usr/bin/env python
from git import RemoteReference, Repo
import shutil
import sys
import yaml


def buildbot_start(buildbot_path, name, master=True):
    buildbot = "buildbot" if master else "buildslave"
    shutil.os.system("{} start {}/{}".format(buildbot, buildbot_path, name))

def create_master(master_path):
    shutil.os.system("buildbot create-master " + master_path)

def create_master_config(buildbot_path, master_path):
    shutil.move("buildbot_config", master_path + "/buildbot_config")
    shutil.os.symlink(
        master_path + "/buildbot_config/master.cfg", 
        master_path + "/master.cfg"
    )

def create_slave(buildbot_path, master_host, slave_name, slave_pass):
    shutil.os.system(
        "buildslave create-slave {0}/{1} {2}:9989 {1} {3}".format(
            buildbot_path, slave_name, master_host, slave_pass
        )
    )

def git_clone(git_url, branch, path):
    p_name = project_name(git_url) 
    git_path = "{}/{}".format(path, p_name)
    repos = Repo.clone_from(git_url, git_path)
    refs_branch = RemoteReference(repos, "refs/remotes/origin/" + branch)
    if branch != "master":
        refs_branch.checkout(b=branch) 

def pre_setup(git_url, branch, config_path):
    git_clone(git_url, branch, "/tmp/")
    p_name = project_name(git_url)
    shutil.os.mkdir(config_path)
    shutil.os.symlink(
        "/tmp/{}/config.yml".format(p_name), 
        config_path + "/config.yml"
    )

def post_setup(git_url, config_path):
    p_name = project_name(git_url)
    shutil.rmtree("/tmp/" + p_name)
    shutil.os.remove(config_path + "/config.yml")

def project_name(git_url):
    return git_url.split("/")[-1].split(".git")[0]

def read_yaml(config_path):
    infile = open(config_path + "/config.yml", "r")
    return yaml.load(infile)

if __name__ == "__main__":
    git_url = sys.argv[1]
    branch = sys.argv[2]
    buildbot_path = shutil.os.environ["HOME"] + "/buildbot"
    pre_setup(git_url, branch, buildbot_path)
    data = read_yaml(buildbot_path)
    git = data["git"]
    master_name = "master"
    master_host = data["master_host"][0]
    master_path = "{}/{}".format(buildbot_path, master_name)
    relation = data["relation"]
    slaves = data["builder"]
   
    create_master(master_path)
    create_master_config(buildbot_path, master_path)
    for p_name in relation:
        for s_name in relation[p_name]:
            code_path = "{0}/{1}/{1}".format(buildbot_path, s_name)
            for a_slave in slaves:
                if s_name == a_slave["name"]:
                    create_slave(
                        buildbot_path, master_host, 
                        a_slave["name"], a_slave["password"]
                    )
                    for repos in git:
                        if p_name in repos["repository"]:
                            git_clone(repos["repository"], repos["branch"], code_path)
                            if repos["repository"] == git_url:
                                shutil.os.symlink(
                                    "{}/{}/config.yml".format(code_path, p_name), 
                                    master_path + "/buildbot_config/config.yml"
                                )
                
    buildbot_start(buildbot_path, master_name)
    for slave in slaves : buildbot_start(buildbot_path, slave["name"], False)
    post_setup(git_url, buildbot_path)
